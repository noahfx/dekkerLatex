\documentclass[12pt,spanish]{article}
\usepackage[english]{babel}
%\usepackage[latin1]{inputenc}
\oddsidemargin 0in
\textwidth 6.75in
\topmargin 0in
\textheight 8.5in
\parindent 0em
\parskip 2ex
\author []{Alberto Josu\'e Ortega Gir\'on 200718898}
\institute [USAC]{Sistemas Operativos 1}
\date {Miercoles 9 de mayo de 2012}
\begin{document}
\section {Problema Productor Consumidor}
\normalsize
El problema Productor Consumidor es un ejemplo cl\'asico de un algoritmo que hace uso de concurrencia, recibe
este nombre debido a que funciona de la siguiente manera: \\
Se encuentra el productor y pone en una pila el producto, este producto es almacenado en la pila hasta que el 
consumidor lo toma.\\
En nuestro caso el producto son datos generados por algun proceso, que son puestos en una cola (buffer) y son tomados
por otro proceso.
Se debe garantizar que: 
\begin{enumerate} 
\item El productor puede generar sus datos en cualquier momento.
\item El consumidor puedo obtener un dato solamente cuando hay uno
\item Para el intercambio de Datos se utiliza un solo buffer, donde el productor y el consumidor tienen acceso.
\item Ningun dato puede tener dos estados al mismo tiempo, es decir es consumido o es producido.
\end{enumerate}
\begin{verbatim}
 
producer:                consumer:
  forever                  forever
    spacesLeft.wait()        itemsReady.wait()
    produce(item)            mutex.wait()
    mutex.wait()             take(item)
    place(item)              mutex.signal()
    mutex.signal()           consume(item)
    itemsReady.signal()      spacesLeft.signal()
\end{verbatim}

\subsection{Aplicaci\'on en un Caso Concreto}
Una aplicac\'on en un caso de "la vida real" es el que se da en un {\em Web Service}, El Web Service recibe la petici\'on de 
informaci\'on  {\em http}, esta petici\'on es puesta en una cola interna.\\
El hilo que se se esta encargando de manejar la petici\'on toma estos datos y se pone a trabajar con ellos, esto se da en cada 
petici\'on {\em http} que se realiza, la petici\'on es puesta en cola y el hilo del servidor se encarga de tomar la informaci\'on 
que ser\'a procesada de regreso al cliente. 
\section{Algoritmo de Dekker}
El algoritmo de Dekker es un algoritmo concurrente para exclusi\'on mutua({\em mutex}), dise\~nado por Esdger Dijkstra.Este permite a dos procesos
o hilos compartir recursos sin conflictos, fue uno de los primeros de este tipo. 
Basicamente lo que el algoritmo hace es que si dos procesos intentan entrar a la secci\'on critica siult\'aneamente el algoritmo elige
un proceso seg\'un una variable de turno.\\
Existen cinco versiones del algoritmo: 
\begin{enumerate} 
\item {\bf Versi\'on 1: } {\em Alternancia Estricta} EL problema con esta version es que hace que los procesos se acomplen a la fuerza, siendo el caso 
donde un proceso es mas lento que el otro causando que se atrase. 
\begin{verbatim} 
		P0                               P1
		a:  loop                             loop
		b:    wait until v equals P0           wait until v equals P1
		c:    critical section                 critical section
		d:    set v to P1                      set v to P0
		e:    non-critical section             non-critical section
		f:  endloop                          endloop

\end{verbatim}
\item {\bf Versi\'on 2: }{\em Problema de Interbloqueo } Los procesos pueden quedar en el mismo estado y no salir de ah\'i {\em deadlock}.
\begin{verbatim} 
		P0                               P1
		a:  loop                             loop
		b:    wait until v1 equals false       wait until v0 equals false
		c:    set v0 to true                   set v1 to true
		d:    critical section                 critical section
		e:    set v0 to false                  set v1 to false
		f:    non-critical section             non-critical section
		g:  endloop                          endloop

\end{verbatim}

\item {\bf Versi\'on 3: }{\em Colisi\'on en la regi\'on critica } No se garantiza la exclusi\'on mutua.
\begin{verbatim}
		P0                               P1
		a:  loop                             loop
		b:    set v0 to true                   set v1 to true
		c:    wait until v1 equals false       wait until v0 equals false
		d:    critical section                 critical section
		e:    set v0 to false                  set v1 to false
		f:    non-critical section             non-critical section
		g:  endloop                          endloop

\end{verbatim}
\item {\bf Versi\'on 4: }{\em Postergaci\'on indefinida} Los procesos pueden quedar esperando mutuamente un evento que probablemente nunca suceder\'a
 ({\em livelock}).
\begin{verbatim}
		P0                               P1
		a:  loop                             loop
		b:    set v0 to true                   set v1 to true
		c:    repeat                           repeat
		d:      set v0 to false                  set v1 to false
		e:      set v0 to true                   set v1 to true
		f:    until v1 equals false            until v0 equals false
		g:    critical section                 critical section
		h:    set v0 to false                  set v1 to false
		i:    non-critical section             non-critical section
		j:  endloop                          endloop

\end{verbatim}	

\item {\bf Versi\'on 5: }{Esta versi\'on es una mezcla de la primera con la cuarta, creando as\'i el algoritmo que mas funciona.}
\begin{verbatim}
		Initially:  v0 is equal false
		v1 is equal false
		v  is equal P0 o P1

		P0                               P1
		a:  loop                             loop
		b:    set v0 to true                   set v1 to true
		c:    loop                             loop
		d:      if v1 equals false exit          if v0 equals false exit
		e:      if v equals P1                   if v equals P0
		f:        set v0 to false                  set v1 to false
		g:        wait until v equals P0           wait until v equals P1
		h:        set v0 to true                   set v1 to true
		i:      fi                               fi
		j:    endloop                          endloop
		k:    critical section                 critical section
		l:    set v0 to false                  set v1 to false
		m:    set v to P1                      set v to P0
		n:    non-critical section             non-critical section
      
\end{verbatim}
\end{enumerate}
% \begin{thebibliography}{1}

 % \bibitem{norman} http://en.wikipedia.org/wiki/Dekker\%27s\_algorithm

  %\bibitem{impj}  http://trevinca.ei.uvigo.es/~formella/doc/cd04/node50.html

  %\bibitem{norman} ttp://trevinca.ei.uvigo.es/~formella/doc/cd00/node50.html 

  %\end{thebibliography}

\end {document}
